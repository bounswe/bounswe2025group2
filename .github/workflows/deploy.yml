name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/genfit-backend ./backend/genfit_django
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/genfit-backend

      - name: Build and push frontend
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/genfit-frontend ./Web_Frontend/genfit_frontend \
            --build-arg VITE_API_BASE_URL=https://${{ secrets.DROPLET_IP }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/genfit-frontend

      - name: Deploy on DigitalOcean Droplet
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: root
          password: ${{ secrets.DROPLET_PASSWORD }}
          script: |
            cd /app/genfit || git clone https://github.com/bounswe/bounswe2025group2.git /app/genfit
            cd /app/genfit
            git pull
            echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" > .env
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
            echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> .env
            echo "DEBUG=False" >> .env
            # Generate SSL certificates if they don't exist
            if [ ! -f ssl/nginx.crt ] || [ ! -f ssl/nginx.key ]; then
              echo "ðŸ”’ Generating SSL certificates..."
              ./generate-ssl.sh
            else
              echo "âœ… SSL certificates already exist"
            fi
            # Stop and remove existing containers
            docker-compose -f docker-compose.prod.yml down --remove-orphans
            # Clean up any dangling containers and images
            docker system prune -f
            # Pull latest images
            docker-compose -f docker-compose.prod.yml pull
            # Start services with fresh containers
            docker-compose -f docker-compose.prod.yml up -d --force-recreate
